@page "/"
@using GuessWhoOnePiece.Components.Elements.Loading
@using GuessWhoOnePiece.Model.CsvManager
@using GuessWhoOnePiece.Model.DataEntries
@using System.Diagnostics
@using System.Threading

<h1>Hello, world!</h1>

Welcome to your new app.

<button @onclick="@OnClickChargement">Data</button>

<div>
    <button @onclick="@OnShowCharacter">Show Character</button>
    <label>@_value</label>
    @if(isLoading)
    {
        <Loading></Loading>
    }
</div>


@code
{
    private bool isLoading = false;
    readonly ControlRoom _controlRoom = new ControlRoom();
    private string _value = string.Empty;

    private void OnClickChargement()
    {
        var thread = new Thread(async () =>
        {
            isLoading = true;
            await InvokeAsync(StateHasChanged);
            var stopwatch = new Stopwatch();
            stopwatch.Start();
            await _controlRoom.GenerateThreads();
            stopwatch.Stop();
            await InvokeAsync(StateHasChanged);
            isLoading = false;
        });

        thread.Start();
    }

    public async Task OnShowCharacter()
    {
        /*var characters = await ReceiveDataCsv.ReceiveAllCharacters();
        foreach (var character in characters)
            {
            _value += character.Name + " ";
        }*/

        var stopwatch = new Stopwatch();

        var character = "Monkey D. Luffy";

        stopwatch.Start();
        var characters1 = await _controlRoom.DataForCharacter(ControlRoom.SetCharacterLink(character), character);
        // await _controlRoom.GenerateThreads();
        // await CharacterNameListManager.ReceivedCharactersList();
        // var charc = _controlRoom._characterNameList;
        stopwatch.Stop();
        Console.WriteLine($"Method Global: {stopwatch.ElapsedMilliseconds} ms");

    }
}
